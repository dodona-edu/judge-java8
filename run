#!/bin/bash

debug() { echo -n "$@" >&2; date >&2; }
debug start

set -o pipefail -e

# Temp files
config="$(mktemp)"      # configuration
result="$(mktemp)"      # result json
compilation="$(mktemp)" # output of compilation
execution="$(mktemp)"   # output of execution
mkdir "/tmp/build"  # compilation directory

trap "rm -rf '$config' '$result' '$compilation' '$execution' '/tmp/build'" EXIT

# Saving the configuration from stdin
cat > "$config"

# Directories containing the test files and the judge repository
resources="$(jshon -e 'resources' -u < "$config")"
judge="$(jshon -e 'judge' -u < "$config")"
workdir="$(jshon -e 'workdir' -u < "$config")"
filename="$(jshon -e 'filename' -u < "$config")"

# time and memory limit with margins
time_limit="$(jshon -e 'time_limit' -u < "$config")"
time_limit="$(( time_limit - 10 ))"

memory_limit="$(jshon -e 'memory_limit' -u < "$config")"
memory_limit="$(( memory_limit * 9 / 10000 ))"

# Record time
start_time="$(date +"%s")"

# User friendly compilation errors
pretty_compilation_errors() {
    # Test the name of the class.
    wrong_class=$(echo $compile_err | grep -c "should be declared in a file named")
    if [ "$wrong_class" -eq "1" ]; then
        expect_class_name=$(echo $compile_err | egrep -o "^\w+.java" | sed "s/.java//g")
        student_class_name=$(echo $compile_err | egrep -o "public class \w+" | sed "s/public class //g")
        echo "De ingediende klasse heeft een foute naam. De klasse hoort als naam \"$expect_class_name\" te hebben, jouw klasse heeft als naam \"$student_class_name\"."
    fi
}

# Compilation parsing
compilation_error_count() {
    echo "$1" | egrep -o "[0-9]+ errors?$" | sed "s/[^0-9]//g"
}

compilation_warning_count() {
    echo "$1" | egrep -o "[0-9]+ warnings?$" | sed "s/[^0-9]//g"
}

# Compilation json
compilation_error_in_submission() {
    compile_err=$(cat $1)

    # Get the amount of errors/warnings as a number.
    compile_err_count=$(compilation_error_count "$compile_err")
    compile_warn_count=$(compilation_warning_count "$compile_err")

    # Get the pretty feedback.
    # TODO: Maybe create a new message for every parsed item instead of simply
    # TODO: concatenating everything in 1 message.
    compile_err_pretty=$(pretty_compilation_errors "$compile_err")

    # Strip the amount of errors/warnings since we're already displaying that
    # somewhere else.
    compile_err=$(echo "$compile_err" | sed "s/[0-9]\+ \(error\|warning\)s\?$//g")

    if [ "$compile_err_count" -eq "1" ]; then
        compile_err_word="fout"
    else
        compile_err_word="fouten"
    fi

    if [ "$compile_warn_count" -eq "1" ]; then
        compile_warn_word="waarschuwing"
    else
        compile_warn_word="waarschuwingen"
    fi

    compile_msg="Je oplossing kon niet worden gecompileerd, de compiler rapporteerde $compile_err_count $compile_err_word en $compile_warn_count $compile_warn_word:"

    jshon -Q -n object                                                    \
        -n false -i 'accepted'                                            \
        -s 'compilation error' -i 'status'                                \
        -s "$compile_err_count $compile_err_word" -i 'description'        \
        -n array                                                          \
            -n object                                                     \
                -s 'Compiler' -i 'description'                            \
                -n array                                                  \
                    -n object                                             \
                        -n false -i 'accepted'                            \
                        -n object                                         \
                            -s 'plain' -i 'format'                        \
                            -s "$compile_msg" -i 'description'            \
                        -i 'description'                                  \
                        -n array                                          \
                            -n object                                     \
                                -s 'code' -i 'format'                     \
                                -s "$compile_err" -i 'description'        \
                            -i 0                                          \
                            -n object                                     \
                                -s 'code' -i 'format'                     \
                                -s "$compile_err_pretty" -i 'description' \
                            -i 0                                          \
                        -i 'messages'                                     \
                    -i 0                                                  \
                -i 'groups'                                               \
            -i 0                                                          \
        -i 'groups'
}

compilation_error_in_tests() {
    compile_err=$(cat $1)
    description="De testen van deze opgave bevatten een fout, contacteer de lesgever."

    jshon -Q -n object                                             \
        -n false -i 'accepted'                                     \
        -s 'compilation error' -i 'status'                         \
        -s "in testen" -i 'description'                            \
        -n array                                                   \
            -n object                                              \
                -s 'Compiler' -i 'description'                     \
                -n array                                           \
                    -n object                                      \
                        -n false -i 'accepted'                     \
                        -n object                                  \
                            -s 'plain' -i 'format'                 \
                            -s "$description" -i 'description'     \
                        -i 'description'                           \
                        -n array                                   \
                            -n object                              \
                                -s 'code' -i 'format'              \
                                -s 'staff' -i 'permission'         \
                                -s "$compile_err" -i 'description' \
                            -i 0                                   \
                        -i 'messages'                              \
                    -i 0                                           \
                -i 'groups'                                        \
            -i 0                                                   \
        -i 'groups'
}

add_compilation_description() {
    jshon -Q                                 \
        -e 'groups' -e 0                     \
            -e 'groups' -e 0                 \
                -n object                    \
                    -s 'plain' -i 'format'    \
                    -s "$1" -i 'description' \
                -i 'description'             \
        -p -p -p -p
}

debug after init

# Compiling judge into "build" and getting a jar in the workdir
find "$judge/src" -name '*.java' \
    | xargs javac -classpath "$judge/lib/*:/tmp/build" -d /tmp/build -sourcepath "$judge/src"
jar -cf "judge.jar" -C /tmp/build .
testlibs="$(find "$judge/lib" "$resources" -name '*.jar' | xargs echo | tr ' ' ':')"
worklibs="$(find "$workdir" -name '*.jar' | xargs echo | tr ' ' ':')"

debug compiled judge

# Compiling the workdir given code
if ! find . -name '*.java' | xargs --no-run-if-empty javac -cp ".:${worklibs}:${testlibs}" -d . -sourcepath . > "$compilation" 2>&1; then
    compilation_error_in_tests <(sed 's_.*/\([^/]*.java\)_\1_' "$compilation")
    exit 0
fi

debug compiled workdir

# Create the Input.java class, containing the submitted code
cat "$(jshon -e 'source' -u < "$config")" > "$filename"

# Compiling the user code
if ! javac -cp ".:${worklibs}" -Xlint:all "$filename" > "$compilation" 2>&1; then
    compilation_error_in_submission "$compilation" \
    | if grep -q '^package' "$filename"; then
        add_compilation_description "Are you sure the submitted class is in the default package?"
      else
        cat
    fi
    exit 0
fi

debug compiled user code

# Compiling the tests
if ! find "$resources" -name '*.java' | xargs javac -cp ".:${resources}:${worklibs}:${testlibs}:judge.jar" -d . -sourcepath "$resources" > "$compilation" 2>&1; then
    compilation_error_in_tests <(sed 's_.*/\([^/]*.java\)_\1_' "$compilation")
    exit 0
fi

debug compiled tests

# Record time
compiled_time="$(date +"%s")"
compilation_time="$((compiled_time - start_time))"

# Running the tests
timeout --preserve-status "$((time_limit - compilation_time))" java -Xmx"${memory_limit}k" -cp ".:${worklibs}:${testlibs}:judge.jar" dodona.junit.JUnitJSON

debug finished
