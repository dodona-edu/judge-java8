#!/bin/bash

debug() { echo -n "$@" >&2; date >&2; }
debug start

set -o pipefail -e

# Temp files
config="$(mktemp)"      # configuration
result="$(mktemp)"      # result json
compilation="$(mktemp)" # output of compilation
execution="$(mktemp)"   # output of execution
mkdir "/tmp/build"  # compilation directory

trap "rm -rf '$config' '$result' '$compilation' '$execution' '/tmp/build'" EXIT

# Saving the configuration from stdin
cat > "$config"

# Directories containing the test files and the judge repository
resources="$(jshon -e 'resources' -u < "$config")"
judge="$(jshon -e 'judge' -u < "$config")"
workdir="$(jshon -e 'workdir' -u < "$config")"
filename="$(jshon -e 'filename' -u < "$config")"

# time and memory limit with margins
time_limit="$(jshon -e 'time_limit' -u < "$config")"
time_limit="$(( time_limit - 10 ))"

memory_limit="$(jshon -e 'memory_limit' -u < "$config")"
memory_limit="$(( memory_limit * 9 / 10000 ))"

# Other configuration parameters.
allow_compilation_warnings="$(jshon -Q -e 'allow_compilation_warnings' -u < "$config" || echo 'true')"

# Record time
start_time="$(date +"%s")"

# Compilation json
compilation_error() {
    jshon -Q -n object                                          \
        -n false -i 'accepted'                                  \
        -s 'compilation error' -i 'status'                      \
        -s "$1" -i 'description'                                \
        -n array                                                \
            -n object                                           \
                -s 'Compiler' -i 'description'                  \
                -n array                                        \
                    -n object                                   \
                        -n false -i 'accepted'                  \
                        -n array                                \
                            -n object                           \
                                -s 'code' -i 'format'           \
                                -s "$(cat $2)" -i 'description' \
                            -i 0                                \
                        -i 'messages'                           \
                    -i 0                                        \
                -i 'groups'                                     \
            -i 0                                                \
        -i 'groups'
}

add_compilation_description() {
    jshon -Q                                 \
        -e 'groups' -e 0                     \
            -e 'groups' -e 0                 \
                -n object                    \
                    -s 'plain' -i 'format'    \
                    -s "$1" -i 'description' \
                -i 'description'             \
        -p -p -p -p
}

debug after init

# Compiling judge into "build" and getting a jar in the workdir
find "$judge/src" -name '*.java' \
    | xargs javac -classpath "$judge/lib/*:/tmp/build" -d /tmp/build -sourcepath "$judge/src"
jar -cf "judge.jar" -C /tmp/build .
testlibs="$(find "$judge/lib" "$resources" -name '*.jar' | xargs echo | tr ' ' ':')"
worklibs="$(find "$workdir" -name '*.jar' | xargs echo | tr ' ' ':')"

debug compiled judge

# Compiling the workdir given code
if ! find . -name '*.java' | xargs --no-run-if-empty javac -cp ".:${worklibs}:${testlibs}" -d . -sourcepath . > "$compilation" 2>&1; then
    compilation_error "in workdir" <(sed 's_.*/\([^/]*.java\)_\1_' "$compilation")
    exit 0
fi

debug compiled workdir

# Create the Input.java class, containing the submitted code
cat "$(jshon -e 'source' -u < "$config")" > "$filename"

# Compiling the user code
compile_opts="-Xlint:all"
[ "$allow_compilation_warnings" == 'true' ] || compile_opts+=' -Werror'

if ! javac -cp .:${worklibs} ${compile_opts} "$filename" > "$compilation" 2>&1; then
    compilation_error "in submitted code" "$compilation" \
    | if grep -q '^package' "$filename"; then
        add_compilation_description "Are you sure the submitted class is in the default package?"
      else
        cat
    fi
    exit 0
fi

debug compiled user code

# Compiling the tests
if ! find "$resources" -name '*.java' | xargs javac -cp ".:${resources}:${worklibs}:${testlibs}:judge.jar" -d . -sourcepath "$resources" > "$compilation" 2>&1; then
    compilation_error "in tests" <(sed 's_.*/\([^/]*.java\)_\1_' "$compilation")
    exit 0
fi

debug compiled tests

# Record time
compiled_time="$(date +"%s")"
compilation_time="$((compiled_time - start_time))"

# Running the tests
timeout --preserve-status "$((time_limit - compilation_time))" java -Xmx"${memory_limit}k" -cp ".:${worklibs}:${testlibs}:judge.jar" dodona.junit.JUnitJSON

debug finished
